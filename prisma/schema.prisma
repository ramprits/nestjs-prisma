generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id       String   @id @default(uuid())
  email    String   @unique
  password String?
  role     Role     @default(USER)
  profile  Profile?
}

model Profile {
  id               String   @id @default(uuid())
  firstName        String
  lastName         String
  mobile           String?
  email            String?  @unique
  primaryContact   String?
  secondaryContact String?
  address          Address? @relation(fields: [addressId], references: [id])
  profileImage     String?
  userId           String   @unique
  User             User     @relation(fields: [userId], references: [id])
  addressId        String?
}

model Address {
  id      String    @id @default(uuid())
  street  String
  city    String
  state   String
  zipCode String
  country String
  Profile Profile[]
}

model Screen {
  id        String          @id @default(cuid())
  name      String          @unique
  features  ScreenFeature[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model Feature {
  id             String          @id @default(cuid())
  name           String          @unique // e.g. Login, Signup, Reset
  loginForm      LoginForm?      @relation(fields: [loginFormId], references: [id])
  loginFormId    String?
  screenFeatures ScreenFeature[]
}

model LoginForm {
  id                   String    @id @default(uuid())
  loginFormName        String
  loginFormDescription String
  loginFormImage       String
  email                Json
  password             Json
  rememberMe           Boolean
  registerLink         String
  resetPasswordLink    String
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  Feature              Feature[]
}

model ScreenFeature {
  id         String     @id @default(cuid())
  screen     Screen     @relation(fields: [screenId], references: [id])
  screenId   String
  feature    Feature    @relation(fields: [featureId], references: [id])
  featureId  String
  enabled    Boolean // true for Enable, false for Disable
  visibility Visibility // Enum for Show/Hidden
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@unique([screenId, featureId])
}

model ACL {
  id         String  @id @default(cuid())
  userId     String
  resource   String // e.g., "Post", "Feature"
  action     String // e.g., "read", "write", "delete"
  resourceId String // The ID of the resource being accessed
  allow      Boolean // True if access is allowed

  createdBy String
  updatedBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Visibility {
  SHOW
  HIDDEN
}
